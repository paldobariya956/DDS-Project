from collections import deque
from datetime import datetime

class Message:
    def __init__(self, content):
        self.content = content
        self.timestamp = datetime.now()

    def __str__(self):
        return f"[{self.timestamp.strftime('%H:%M:%S')}] {self.content}"

class ChatManager:
    def __init__(self):
        self.message_queue = deque()    # FIFO queue for incoming messages
        self.undo_stack = []            # LIFO stack for undo
        self.redo_stack = []            # LIFO stack for redo

    def send_message(self, content):
        message = Message(content)
        self.message_queue.append(message)
        self.undo_stack.append(message)
        self.redo_stack.clear()  # Clear redo history after new message
        print(f"Sent: {message}")

    def undo(self):
        if not self.undo_stack:
            print("Nothing to undo.")
            return
        message = self.undo_stack.pop()
        self.redo_stack.append(message)
        print(f"Undo: Removed '{message.content}'")

    def redo(self):
        if not self.redo_stack:
            print("Nothing to redo.")
            return
        message = self.redo_stack.pop()
        self.undo_stack.append(message)
        print(f"Redo: Restored '{message.content}'")

    def show_history(self):
        print("\nChat History:")
        for msg in self.undo_stack:
            print(f"  {msg}")
        print()

    def show_queue(self):
        print("\nQueued Messages:")
        for msg in self.message_queue:
            print(f"  {msg}")
        print()

# ========================
# Example Console Runner
# ========================
if __name__ == "__main__":
    chat = ChatManager()
    print("Chat Message History Manager")
    
    while True:
        cmd = input("\nCommands: send [message], undo, redo, history, queue, quit\n> ").strip()

        if cmd.startswith("send "):
            content = cmd[5:].strip()
            chat.send_message(content)
        elif cmd == "undo":
            chat.undo()
        elif cmd == "redo":
            chat.redo()
        elif cmd == "history":
            chat.show_history()
        elif cmd == "queue":
            chat.show_queue()
        elif cmd == "quit":
            print("Exiting Chat Manager.")
            break
        else:
            print("Unknown command.")
